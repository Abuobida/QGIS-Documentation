# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-26 14:10\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# a1362793eebb429f9e3cfa4ffa34a46a
#: ../../source/docs/user_manual/processing/console.rst:10
msgid "Using processing algorithms from the console"
msgstr ""

# 450a9219215447178b0a02dd9f255a58
#: ../../source/docs/user_manual/processing/console.rst:29
msgid ""
"The code that you can execute from the Python console, even if it does not "
"call any specific processing method, can be converted into a new algorithm "
"that you can later call from the toolbox, the graphical modeler or any other"
" component, just like you do with any other algorithm. In fact, some "
"algorithms that you can find in the toolbox are simple scripts."
msgstr ""

# f81eeabbb6424ee0afc7fedf3c6159ae
#: ../../source/docs/user_manual/processing/console.rst:39
msgid "Calling algorithms from the Python console"
msgstr ""

# 8da1efcdb76c44278f885fedaa3fa94f
#: ../../source/docs/user_manual/processing/console.rst:41
msgid ""
"The first thing you have to do is to import the processing functions with "
"the following line:"
msgstr ""

# 790008553c664701b7957d56e6e6312b
#: ../../source/docs/user_manual/processing/console.rst:61
msgid "You will see something like this."
msgstr ""

# 54cf61a685374707813845a74252d135
#: ../../source/docs/user_manual/processing/console.rst:84
msgid ""
"That's a list of all the available algorithms, alphabetically ordered, along"
" with their corresponding command-line names."
msgstr ""

# ffe17d1c249d4eb4869175aa9770ca82
#: ../../source/docs/user_manual/processing/console.rst:102
msgid ""
"This result might change depending on the algorithms you have available."
msgstr ""

# d8e5878b23ef4b76a7164a1ab73500e0
#: ../../source/docs/user_manual/processing/console.rst:104
msgid ""
"It is easier now to find the algorithm you are looking for and its command-"
"line name, in this case ``saga:slopeaspectcurvature``."
msgstr ""

# 4b0b2fdb6f554494815f758129bf70bd
#: ../../source/docs/user_manual/processing/console.rst:130
msgid ""
"Now you have everything you need to run any algorithm. As we have already "
"mentioned, there is only one single command to execute algorithms: "
"``runalg()``. Its syntax is as follows:"
msgstr ""

# d53e581b54564b6db6dfb95b2799b8d2
#: ../../source/docs/user_manual/processing/console.rst:139
msgid ""
"The list of parameters and outputs to add depends on the algorithm you want "
"to run, and is exactly the list that the ``alghelp()`` method gives you, in "
"the same order as shown."
msgstr ""

# f4717d4423f84f4ba804e9604caf2cf8
#: ../../source/docs/user_manual/processing/console.rst:152
msgid ""
"Selection. If an algorithm has a selection parameter, the value of that "
"parameter should be entered using an integer value. To know the available "
"options, you can use the ``algoptions()`` command, as shown in the following"
" example:"
msgstr ""

# 200eadd944114022960da57e11aafbf2
#: ../../source/docs/user_manual/processing/console.rst:174
msgid ""
"Table Field from XXX. Use a string with the name of the field to use. This "
"parameter is case-sensitive."
msgstr ""

# 57fb7029ca3442f3bf0450a295806058
#: ../../source/docs/user_manual/processing/console.rst:179
msgid "CRS. Enter the EPSG code number of the desired CRS."
msgstr ""

# a43f17dd9ddd467d84048132455f6ab1
#: ../../source/docs/user_manual/processing/console.rst:180
msgid ""
"Extent. You must use a string with ``xmin``, ``xmax``, ``ymin`` and ``ymax``"
" values separated by commas (``,``)."
msgstr ""

# 4c1a0b56041b49bda8834df8666ebc7e
#: ../../source/docs/user_manual/processing/console.rst:183
msgid ""
"Boolean, file, string and numerical parameters do not need any additional "
"explanations."
msgstr ""

# 8478edf297ea4a018f558e84a3cfa73a
#: ../../source/docs/user_manual/processing/console.rst:208
msgid "Additional functions for handling data"
msgstr ""

# 00443acdb1984e37b1066169a576d1e9
#: ../../source/docs/user_manual/processing/console.rst:234
msgid "Creating scripts and running them from the toolbox"
msgstr ""

# 54448587f51b42eeb0478a1a69ed7ead
#: ../../source/docs/user_manual/processing/console.rst:246
msgid ""
"The name of the algorithm (the one you will see in the toolbox) is created "
"from the filename, removing its extension and replacing low hyphens with "
"blank spaces."
msgstr ""

# 1cf52f535ad349e49c724b6cb9a5dc41
#: ../../source/docs/user_manual/processing/console.rst:268
msgid ""
"The part of the code where this processing takes place is not difficult to "
"understand if you have read the previous sections in this chapter. The first"
" lines, however, need some additional explanation. They provide the "
"information that is needed to turn your code into an algorithm that can be "
"run from any of the GUI components, like the toolbox or the graphical "
"modeler."
msgstr ""

# 4321e05596b74b4d8f18e039a7e91e8e
#: ../../source/docs/user_manual/processing/console.rst:293
msgid "``multiple raster``. A set of input raster layers."
msgstr ""

# 08e43d4da8f24fa7a86df769532e63e3
#: ../../source/docs/user_manual/processing/console.rst:294
msgid "``multiple vector``. A set of input vector layers."
msgstr ""

# a7cf68f9b508432f91649e2fd59cb859
#: ../../source/docs/user_manual/processing/console.rst:295
msgid ""
"``field``. A field in the attributes table of a vector layer. The name of "
"the layer has to be added after the ``field`` tag. For instance, if you have"
" declared a vector input with ``mylayer=vector``, you could use "
"``myfield=field mylayer`` to add a field from that layer as parameter."
msgstr ""

# 111226001f1c47fda77b383e034dac3d
#: ../../source/docs/user_manual/processing/console.rst:302
msgid ""
"The parameter name is the name that will be shown to the user when executing"
" the algorithm, and also the variable name to use in the script code. The "
"value entered by the user for that parameter will be assigned to a variable "
"with that name."
msgstr ""

# b3f5083bc8ae4468adb452562346d4e4
#: ../../source/docs/user_manual/processing/console.rst:317
msgid "Outputs are defined in a similar manner, using the following tags:"
msgstr ""

# daa7b748dace41a2ab6e542e85760f08
#: ../../source/docs/user_manual/processing/console.rst:319
msgid "``output raster``"
msgstr ""

# a85b75243e004b81b1759ebf3664e93c
#: ../../source/docs/user_manual/processing/console.rst:320
msgid "``output vector``"
msgstr ""

# 7fb9fb7192214cbab1d7e82a6aa91630
#: ../../source/docs/user_manual/processing/console.rst:321
msgid "``output table``"
msgstr ""

# dcd7e4ad4a4f4fce882679f13ad46a49
#: ../../source/docs/user_manual/processing/console.rst:322
msgid "``output html``"
msgstr ""

# eb44ae6858484dac8bc8e484d576c65d
#: ../../source/docs/user_manual/processing/console.rst:323
msgid "``output file``"
msgstr ""

# 20e0ef154d0e406dacbbcc46d9b80131
#: ../../source/docs/user_manual/processing/console.rst:324
msgid "``output number``"
msgstr ""

# 6cf38ae1b6294fd384cf09c65bbcff39
#: ../../source/docs/user_manual/processing/console.rst:325
msgid "``output string``"
msgstr ""

# f5e9ecf5e71e4927a5f541e1bf1daf29
#: ../../source/docs/user_manual/processing/console.rst:352
msgid "the following line will set the value of the output to 5:"
msgstr ""

# cf3972bd96264d57a7f7969597ccbfdd
#: ../../source/docs/user_manual/processing/console.rst:358
msgid ""
"In addition to the tags for parameters and outputs, you can also define the "
"group under which the algorithm will be shown, using the ``group`` tag."
msgstr ""

# 2e67e747e09a46868ab6618541e61be3
#: ../../source/docs/user_manual/processing/console.rst:372
msgid "Documenting your scripts"
msgstr ""

# 6ec4cfaa48444d46bdbc7b8fc70f651b
#: ../../source/docs/user_manual/processing/console.rst:388
msgid "Pre- and post-execution script hooks"
msgstr ""

# 73558b845fe7429684f1847c0e96e153
#: ../../source/docs/user_manual/processing/console.rst:390
msgid ""
"Scripts can also be used to set pre- and post-execution hooks that are run "
"before and after an algorithm is run. This can be used to automate tasks "
"that should be performed whenever an algorithm is executed."
msgstr ""

# 98066e72385e452da6f872aeaabf28f7
#: ../../source/docs/user_manual/processing/console.rst:394
msgid ""
"The syntax is identical to the syntax explained above, but an additional "
"global variable named ``alg`` is available, representing the algorithm that "
"has just been (or is about to be) executed."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:210
msgid ""
"Apart from the functions used to call algorithms, importing the "
"``processing`` package will also import some additional functions that make "
"it easier to work with data, particularly vector data. They are just "
"convenience functions that wrap some functionality from the QGIS API, "
"usually with a less complex syntax. These functions should be used when "
"developing new algorithms, as they make it easier to operate with input "
"data."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:17
msgid ""
"The console allows advanced users to increase their productivity and perform"
" complex operations that cannot be performed using any of the other GUI "
"elements of the processing framework. Models involving several algorithms "
"can be defined using the command-line interface, and additional operations "
"such as loops and conditional sentences can be added to create more flexible"
" and powerful workflows."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:23
msgid ""
"There is not a processing console in QGIS, but all processing commands are "
"available instead from the QGIS built-in :ref:`Python console <console>`. "
"That means that you can incorporate those commands into your console work "
"and connect processing algorithms to all the other features (including "
"methods from the QGIS API) available from there."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:35
msgid ""
"In this section, we will see how to use processing algorithms from the QGIS "
"Python console, and also how to write algorithms using Python."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:48
msgid ""
"Now, there is basically just one (interesting) thing you can do with that "
"from the console: execute an algorithm. That is done using the ``runalg()`` "
"method, which takes the name of the algorithm to execute as its first "
"parameter, and then a variable number of additional parameters depending on "
"the requirements of the algorithm. So the first thing you need to know is "
"the name of the algorithm to execute. That is not the name you see in the "
"toolbox, but rather a unique command–line name. To find the right name for "
"your algorithm, you can use the ``algslist()`` method. Type the following "
"line in your console:"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:87
msgid ""
"You can use a string as a parameter for this method. Instead of returning "
"the full list of algorithms, it will only display those that include that "
"string. If, for instance, you are looking for an algorithm to calculate "
"slope from a DEM, type ``alglist(\"slope\")`` to get the following result::"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:107
msgid ""
"Once you know the command-line name of the algorithm, the next thing to do "
"is to determine the right syntax to execute it. That means knowing which "
"parameters are needed and the order in which they have to be passed when "
"calling the ``runalg()`` method. There is a method to describe an algorithm "
"in detail, which can be used to get a list of the parameters that an "
"algorithm requires and the outputs that it will generate. To get this "
"information, you can use the ``alghelp(name_of_the_algorithm)`` method. Use "
"the command-line name of the algorithm, not the full descriptive name."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:115
msgid ""
"Calling the method with ``saga:slopeaspectcurvature`` as parameter, you get "
"the following description:"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:143
msgid ""
"Depending on the type of parameter, values are introduced differently. The "
"next list gives a quick review of how to introduce values for each type of "
"input parameter:"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:146
msgid ""
"Raster Layer, Vector Layer or Table. Simply use a string with the name that "
"identifies the data object to use (the name it has in the QGIS Table of "
"Contents) or a filename (if the corresponding layer is not opened, it will "
"be opened but not added to the map canvas). If you have an instance of a "
"QGIS object representing the layer, you can also pass it as parameter. If "
"the input is optional and you do not want to use any data object, use "
"``None``."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:169
msgid ""
"In this case, the algorithm has one such parameter, with seven options. "
"Notice that ordering is zero-based."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:171
msgid ""
"Multiple input. The value is a string with input descriptors separated by "
"semicolons (``;``). As in the case of single layers or tables, each input "
"descriptor can be the data object name, or its file path."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:176
msgid ""
"Fixed Table. Type the list of all table values separated by commas (``,``) "
"and enclosed between quotes (``\"``). Values start on the upper row and go "
"from left to right. You can also use a 2-D array of values representing the "
"table."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:186
msgid ""
"Input parameters such as strings, booleans, or numerical values have default"
" values. To use them, specify ``None`` in the corresponding parameter entry."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:189
msgid ""
"For output data objects, type the file path to be used to save it, just as "
"it is done from the toolbox. If you want to save the result to a temporary "
"file, use ``None``. The extension of the file determines the file format. If"
" you enter a file extension not supported by the algorithm, the default file"
" format for that output type will be used, and its corresponding extension "
"appended to the given file path."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:196
msgid ""
"Unlike when an algorithm is executed from the toolbox, outputs are not added"
" to the map canvas if you execute that same algorithm from the Python "
"console. If you want to add an output to the map canvas, you have to do it "
"yourself after running the algorithm. To do so, you can use QGIS API "
"commands, or, even easier, use one of the handy methods provided for such "
"tasks."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:202
msgid ""
"The ``runalg`` method returns a dictionary with the output names (the ones "
"shown in the algorithm description) as keys and the file paths of those "
"outputs as values. You can load those layers by passing the corresponding "
"file paths to the ``load()`` method."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:217
msgid ""
"Below is a list of some of these commands. More information can be found in "
"the classes under the ``processing/tools`` package, and also in the example "
"scripts provided with QGIS."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:221
msgid ""
"``getObject(obj)``: Returns a QGIS object (a layer or table) from the passed"
" object, which can be a filename or the name of the object in the QGIS "
"Layers List"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:223
msgid ""
"``values(layer, fields)``: Returns the values in the attributes table of a "
"vector layer, for the passed fields. Fields can be passed as field names or "
"as zero-based field indices. Returns a dict of lists, with the passed field "
"identifiers as keys. It considers the existing selection."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:227
msgid ""
"``features(layer)``: Returns an iterator over the features of a vector "
"layer, considering the existing selection."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:229
msgid ""
"``uniqueValues(layer, field)``: Returns a list of unique values for a given "
"attribute.  Attributes can be passed as a field name or a zero-based field "
"index. It considers the existing selection."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:236
msgid ""
"You can create your own algorithms by writing the corresponding Python code "
"and adding a few extra lines to supply additional information needed to "
"define the semantics of the algorithm. You can find a :guilabel:`Create new "
"script` menu under the :guilabel:`Tools` group in the :guilabel:`Script` "
"algorithms block of the toolbox. Double-click on it to open the script "
"editing dialog. That's where you should type your code. Saving the script "
"from there in the :file:`scripts` folder (the default folder when you open "
"the save file dialog) with :file:`.py` extension will automatically create "
"the corresponding algorithm."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:249
msgid ""
"Let's have a look at the following code, which calculates the Topographic "
"Wetness Index (TWI) directly from a DEM."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:263
msgid ""
"As you can see, the calculation involves three algorithms, all of them "
"coming from SAGA. The last one calculates the TWI, but it needs a slope "
"layer and a flow accumulation layer. We do not have these layers, but since "
"we have the DEM, we can calculate them by calling the corresponding SAGA "
"algorithms."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:274
msgid ""
"These lines start with a double Python comment symbol (``##``) and have the "
"following structure:"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:281
msgid ""
"Here is a list of all the parameter types that are supported in processing "
"scripts, their syntax and some examples."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:284
msgid "``raster``. A raster layer."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:285
msgid "``vector``. A vector layer."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:286
msgid "``table``. A table."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:287
msgid ""
"``number``. A numerical value. A default value must be provided. For "
"instance, ``depth=number 2.4``."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:289
msgid ""
"``string``. A text string. As in the case of numerical values, a default "
"value must be added. For instance, ``name=string Victor``."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:291
msgid ""
"``boolean``. A boolean value. Add ``True`` or ``False`` after it to set the "
"default value. For example, ``verbose=boolean True``."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:299
msgid "``folder``. A folder."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:300
msgid "``file``. A filename."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:306
msgid ""
"When showing the name of the parameter to the user, the name will be edited "
"to improve its appearance, replacing low hyphens with spaces. So, for "
"instance, if you want the user to see a parameter named ``A numerical "
"value``, you can use the variable name ``A_numerical_value``."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:311
msgid ""
"Layers and table values are strings containing the file path of the "
"corresponding object. To turn them into a QGIS object, you can use the "
"``processing.getObjectFromUri()`` function. Multiple inputs also have a "
"string value, which contains the file paths to all selected object, "
"separated by semicolons (``;``)."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:327
msgid ""
"The value assigned to the output variables is always a string with a file "
"path. It will correspond to a temporary file path in case the user has not "
"entered any output filename."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:331
msgid ""
"When you declare an output, the algorithm will try to add it to QGIS once it"
" is finished. That is why, although the ``runalg()`` method does not load "
"the layers it produces, the final TWI layer will be loaded (using the case "
"of our previous example), since it is saved to the file entered by the user,"
" which is the value of the corresponding output."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:337
msgid ""
"Do not use the ``load()`` method in your script algorithms, just when "
"working with the console line. If a layer is created as output of an "
"algorithm, it should be declared as such. Otherwise, you will not be able to"
" properly use the algorithm in the modeler, since its syntax (as defined by "
"the tags explained above) will not match what the algorithm really creates."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:343
msgid ""
"Hidden outputs (numbers and strings) do not have a value. Instead, you have "
"to assign a value to them. To do so, just set the value of a variable with "
"the name you used to declare that output. For instance, if you have used "
"this declaration,"
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:361
msgid ""
"If your algorithm takes a long time to process, it is a good idea to inform "
"the user. You have a global named ``progress`` available, with two possible "
"methods: ``setText(text)`` and ``setPercentage(percent)`` to modify the "
"progress text and the progress bar."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:366
msgid ""
"Several examples are provided. Please check them to see real examples of how"
" to create algorithms using the processing framework classes. You can right-"
"click on any script algorithm and select :guilabel:`Edit script` to edit its"
" code or just to see it."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:374
msgid ""
"As in the case of models, you can create additional documentation for your "
"scripts, to explain what they do and how to use them. In the script editing "
"dialog, you will find an **[Edit script help]** button. Click on it and it "
"will take you to the help editing dialog. Check the section about the "
"graphical modeler to know more about this dialog and how to use it."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:380
msgid ""
"Help files are saved in the same folder as the script itself, adding the "
":file:`.help` extension to the filename. Notice that you can edit your "
"script's help before saving the script for the first time. If you later "
"close the script editing dialog without saving the script (i.e., you discard"
" it), the help content you wrote will be lost. If your script was already "
"saved and is associated to a filename, saving the help content is done "
"automatically."
msgstr ""

#: ../../source/docs/user_manual/processing/console.rst:398
msgid ""
"In the :guilabel:`General` group of the processing configuration dialog, you"
" will find two entries named :guilabel:`Pre-execution script file` and "
":guilabel:`Post-execution script file` where the filename of the scripts to "
"be run in each case can be entered."
msgstr ""

#~ msgid ""
#~ "The console allows advanced users to increase their productivity and perform"
#~ " complex operations that cannot be performed using any of the other GUI "
#~ "elements of the processing framework GUI. Models involving several "
#~ "algorithms can be defined using the command-line interface, and additional "
#~ "operations such as loops and conditional sentences can be added to create "
#~ "more flexible and powerful workflows."
#~ msgstr ""

#~ msgid ""
#~ "Now, there is basically just one (interesting) thing you can do with that "
#~ "from the console: to execute an algorithm. That is done using the "
#~ "``runalg()`` method, which takes the name of the algorithm to execute as its"
#~ " first parameter, and then a variable number of additional parameter "
#~ "depending on the requirements of the algorithm. So the first thing you need "
#~ "to know is the name of the algorithm to execute. That is not the name you "
#~ "see in the toolbox, but rather a unique command–line name. To find the right"
#~ " name for your algorithm, you can use the ``algslist()`` method. Type the "
#~ "following line in you console:"
#~ msgstr ""

#~ msgid ""
#~ "You can use a string as a parameter for this method. Instead of returning "
#~ "the full list of algorithm, it will only display those that include that "
#~ "string. If, for instance, you are looking for an algorithm to calculate "
#~ "slope from a DEM, type ``alglist(\"slope\")`` to get the following result:"
#~ msgstr ""

#~ msgid ""
#~ "Once you know the command-line name of the algorithm, the next thing to do "
#~ "is to know the right syntax to execute it. That means knowing which "
#~ "parameters are needed and the order in which they have to be passed when "
#~ "calling the ``runalg()`` method. There is a method to describe an algorithm "
#~ "in detail, which can be used to get a list of the parameters that an "
#~ "algorithms require and the outputs that it will generate. To do it, you can "
#~ "use the ``alghelp(name_of_the_algorithm)`` method. Use the command-line name"
#~ " of the algorithm, not the full descriptive name."
#~ msgstr ""

#~ msgid ""
#~ "Calling the method with ``saga:slopeaspectcurvature`` as parameter, you get "
#~ "the following description."
#~ msgstr ""

#~ msgid ""
#~ "Depending on the type of parameter, values are introduced differently. The "
#~ "next one is a quick review of how to introduce values for each type of input"
#~ " parameter:"
#~ msgstr ""

#~ msgid ""
#~ "In this case, the algorithm has one of such such parameters, with 7 options."
#~ " Notice that ordering is zero-based."
#~ msgstr ""

#~ msgid ""
#~ "Multiple input. The value is a string with input descriptors separated by "
#~ "semicolons (``;``). As in the case of single layers or tables, each input "
#~ "descriptor can be the data object name, or its filepath."
#~ msgstr ""

#~ msgid ""
#~ "Fixed Table. Type the list of all table values separated by commas (``,``) "
#~ "and enclosed between quotes (``\"``). Values start on the upper row and go "
#~ "from left to right. You can also use a 2D array of values representing the "
#~ "table."
#~ msgstr ""

#~ msgid ""
#~ "Input parameters such as strings booleans or numerical values have default "
#~ "values. To use them, use ``None`` in the corresponding parameter entry."
#~ msgstr ""

#~ msgid ""
#~ "For output data objects, type the filepath to be used to save it, just as it"
#~ " is done from the toolbox. If you want to save the result to a temporary "
#~ "file, use ``None``. The extension of the file determines the file format. If"
#~ " you enter a file extension not included in the ones supported by the "
#~ "algorithm, the default file format for that output type will be used, and "
#~ "its corresponding extension appended to the given filepath."
#~ msgstr ""

#~ msgid ""
#~ "The ``runalg`` method returns a dictionary with the output names (the ones "
#~ "shown in the algorithm description) as keys and the filepaths of those "
#~ "outputs as values. You can load those layers by passing its filepath to the "
#~ "``load()`` method."
#~ msgstr ""

#~ msgid ""
#~ "``values(layer, fields)``: Returns the values in the attributes table of a "
#~ "vector layer, for the passed fields. Fields can be passed as field names or "
#~ "as zero-based field indices. Returns a dict of lists, with the passed field "
#~ "identifiers as keys. It considers the existing selection"
#~ msgstr ""

#~ msgid ""
#~ "``getfeatures(layer)``: Returns an iterator over the features of a vector "
#~ "layer, considering the existing selection."
#~ msgstr ""

#~ msgid ""
#~ "``uniquelabels(layer, field)``: Returns a list of unique values for a given "
#~ "attribute.  Attribute can be passed as a field name or a zero-based field "
#~ "index. It considers the existing selection"
#~ msgstr ""

#~ msgid ""
#~ "You can create your own algorithms by writing the corresponding Python code "
#~ "and adding a few extra lines to supply additional information needed to "
#~ "define the semantics of the algorithm. You can find a :guilabel:`Create new "
#~ "script` menu under the :guilabel:`Tools` group in the :guilabel:`Script` "
#~ "algorithms block of the toolbox. Double-click on it to open the script "
#~ "edition dialog. That's where you should type your code. Saving the script "
#~ "from there in the :file:`scripts` folder (the default one when you open the "
#~ "save file dialog), with :file:`.py` extension, will automatically create the"
#~ " corresponding algorithm."
#~ msgstr ""

#~ msgid ""
#~ "Let's have the following code, which calculates the Topographic Wetness "
#~ "Index (TWI) directly from a DEM"
#~ msgstr ""

#~ msgid ""
#~ "As you can see, it involves 3 algorithms, all of them coming from SAGA. The "
#~ "last one of them calculates the TWI, but it needs a slope layer and a flow "
#~ "accumulation layer. We do not have these ones, but since we have the DEM, we"
#~ " can calculate them calling the corresponding SAGA algorithms."
#~ msgstr ""

#~ msgid ""
#~ "These lines start with a double Python comment symbol (``##``) and have the "
#~ "following structure"
#~ msgstr ""

#~ msgid ""
#~ "Here is a list of all the parameter types that are supported in processign "
#~ "scripts, their syntax and some examples."
#~ msgstr ""

#~ msgid "``raster``. A raster layer"
#~ msgstr ""

#~ msgid "``vector``. A vector layer"
#~ msgstr ""

#~ msgid "``table``. A table"
#~ msgstr ""

#~ msgid ""
#~ "``number``. A numerical value. A default value must be provided. For "
#~ "instance, ``depth=number 2.4``"
#~ msgstr ""

#~ msgid ""
#~ "``string``. A text string. As in the case of numerical values, a default "
#~ "value must be added. For instance, ``name=string Victor``"
#~ msgstr ""

#~ msgid ""
#~ "``boolean``. A boolean value. Add ``True`` or ``False`` after it to set the "
#~ "default value. For example, ``verbose=boolean True``"
#~ msgstr ""

#~ msgid "``folder``. A folder"
#~ msgstr ""

#~ msgid "``file``. A filename"
#~ msgstr ""

#~ msgid ""
#~ "When showing the name of the parameter to the user, the name will be edited "
#~ "it to improve its appearance, replacing low hyphens with spaces. So, for "
#~ "instance, if you want the user to see a parameter named ``A numerical "
#~ "value``, you can use the variable name ``A_numerical_value``."
#~ msgstr ""

#~ msgid ""
#~ "The value assigned to the output variables is always a string with a "
#~ "filepath. It will correspond to a temporary filepath in case the user has "
#~ "not entered any output filename."
#~ msgstr ""

#~ msgid ""
#~ "Do not use the ``load()`` method in your script algorithms, but just when "
#~ "working with the console line. If a layer is created as output of an "
#~ "algorithm, it should be declared as such. Otherwise, you will not be able to"
#~ " properly use the algorithm in the modeler, since its syntax (as defined by "
#~ "the tags explained above) will not match what the algorithm really creates."
#~ msgstr ""

#~ msgid ""
#~ "Hidden outputs (numbers and strings) do not have a value. Instead, it is you"
#~ " who has to assign a value to them. To do so, just set the value of a "
#~ "variable with the name you used to declare that output. For instance, if you"
#~ " have used this declaration,"
#~ msgstr ""

#~ msgid ""
#~ "If you algorithm takes a long time to process, it is a good idea to inform "
#~ "the user. You have a global named ``progress`` available, with two available"
#~ " methods: ``setText(text)`` and ``setPercentage(percent)`` to modify the "
#~ "progress text and the progress bar."
#~ msgstr ""

#~ msgid ""
#~ "Several examples are provided. Please, check them to see real examples of "
#~ "how to create algorithms using the processing framework classes. You can "
#~ "right-click on any script algorithm and select :guilabel:`Edit script` to "
#~ "edit its code or just to see it."
#~ msgstr ""

#~ msgid ""
#~ "As in the case of models, you can create additional documentation for your "
#~ "script, to explain what they do and how to use them. In the script editing "
#~ "dialog you will find a **[Edit script help]** button. Click on it and it "
#~ "will take you to the help editing dialog. Check the chapter about the "
#~ "graphical modeler to know more about this dialog and how to use it."
#~ msgstr ""

#~ msgid ""
#~ "Help files are saved in the same folder as the script itself, adding the "
#~ ":file:`.help` extension to the filename. Notice that you can edit your "
#~ "script's help before saving it for the first time. If you later close the "
#~ "script editing dialog without saving the script (i.e. you discard it), the "
#~ "help content you wrote will be lost. If your script was already saved and is"
#~ " associated to a filename, saving is done automatically."
#~ msgstr ""

#~ msgid ""
#~ "In the :guilabel:`General` group of the processing config dialog you will "
#~ "find two entries named :guilabel:`Pre-execution script file` and :guilabel"
#~ ":`Post-execution script file` where the filename of the scripts to be run in"
#~ " each case can be entered."
#~ msgstr ""

#~ msgid ""
#~ "There is not a proccesing console in |qg|, but all processing commands are "
#~ "available instead from the |qg| built-in Python console. That means that you"
#~ " can incorporate those command to your console work and connect processing "
#~ "algorithms to all the other features (including methods from the |qg| API) "
#~ "available from there."
#~ msgstr ""

#~ msgid ""
#~ "In this chapter we will see how to use processing algorithms from the |qg| "
#~ "Python console, and also how to write your own algorithms using Python."
#~ msgstr ""

#~ msgid ""
#~ "Raster Layer, Vector Layer or Table. Simply use a string with the name that "
#~ "identifies the data object to use (the name it has in the |qg| Table of "
#~ "Contents) or a filename (if the corresponding layer is not opened, it will "
#~ "be opened, but not added to the map canvas). If you have an instance of a "
#~ "|qg| object representing the layer, you can also pass it as parameter. If "
#~ "the input is optional and you do not want to use any data object, use "
#~ "``None``."
#~ msgstr ""

#~ msgid ""
#~ "Unlike when an algorithm is executed from the toolbox, outputs are not added"
#~ " to the map canvas if you execute that same algorithm from the Python "
#~ "Console. If you want to add an output to it, you have to do it yourself "
#~ "after running the algorithm. To do so, you can use |qg| API commands, or, "
#~ "even easier, use one of the handy methods provided for such task."
#~ msgstr ""

#~ msgid ""
#~ "Apart from the functions used to call algorithms, importing the "
#~ "``processing`` package will also import some additional functions that make "
#~ "it easier to work with data, particularly vector data. They are just "
#~ "convenience functions that wrap some functionality from the |qg| API, "
#~ "usually with a less complex syntax. These functions should be used when "
#~ "developing new algorithms, as they make it easier to operate with input "
#~ "data."
#~ msgstr ""

#~ msgid ""
#~ "Below is a list of some of this commands. More information can be found in "
#~ "the classes under the ``processing/tools`` package, and aso in the example "
#~ "scripts provided with |qg|."
#~ msgstr ""

#~ msgid ""
#~ "``getobject(obj)``: Returns a |qg| object (a layer or table) from the passed"
#~ " object, which can be a filename or the name of the object in the |qg| Table"
#~ " of Contents."
#~ msgstr ""

#~ msgid ""
#~ "Layers and tables values are strings containing the filepath of the "
#~ "corresponding object. To turn them into a |qg| object, you can use the "
#~ "``processing.getObjectFromUri()`` function. Multiple inputs also have a "
#~ "string value, which contains the filepaths to all selected object, separated"
#~ " by semicolons (``;``)."
#~ msgstr ""

#~ msgid ""
#~ "When you declare an output, the algorithm will try to add it to |qg| once it"
#~ " is finished. That is the reason why, although the ``runalg()`` method does "
#~ "not load the layers it produces, the final TWI layer will be loaded, since "
#~ "it is saved to the file entered by the user, which is the value of the "
#~ "corresponding output."
#~ msgstr ""

#~ msgid ""
#~ "There is not a proccesing console in QGIS, but all processing commands are "
#~ "available instead from the QGIS built-in Python console. That means that you"
#~ " can incorporate those command to your console work and connect processing "
#~ "algorithms to all the other features (including methods from the QGIS API) "
#~ "available from there."
#~ msgstr ""

#~ msgid ""
#~ "In this chapter we will see how to use processing algorithms from the QGIS "
#~ "Python console, and also how to write your own algorithms using Python."
#~ msgstr ""

#~ msgid ""
#~ "Raster Layer, Vector Layer or Table. Simply use a string with the name that "
#~ "identifies the data object to use (the name it has in the QGIS Table of "
#~ "Contents) or a filename (if the corresponding layer is not opened, it will "
#~ "be opened, but not added to the map canvas). If you have an instance of a "
#~ "QGIS object representing the layer, you can also pass it as parameter. If "
#~ "the input is optional and you do not want to use any data object, use "
#~ "``None``."
#~ msgstr ""

#~ msgid ""
#~ "Unlike when an algorithm is executed from the toolbox, outputs are not added"
#~ " to the map canvas if you execute that same algorithm from the Python "
#~ "Console. If you want to add an output to it, you have to do it yourself "
#~ "after running the algorithm. To do so, you can use QGIS API commands, or, "
#~ "even easier, use one of the handy methods provided for such task."
#~ msgstr ""

#~ msgid ""
#~ "Below is a list of some of this commands. More information can be found in "
#~ "the classes under the ``processing/tools`` package, and aso in the example "
#~ "scripts provided with QGIS."
#~ msgstr ""

#~ msgid ""
#~ "``getobject(obj)``: Returns a QGIS object (a layer or table) from the passed"
#~ " object, which can be a filename or the name of the object in the QGIS Table"
#~ " of Contents."
#~ msgstr ""

#~ msgid ""
#~ "Layers and tables values are strings containing the filepath of the "
#~ "corresponding object. To turn them into a QGIS object, you can use the "
#~ "``processing.getObjectFromUri()`` function. Multiple inputs also have a "
#~ "string value, which contains the filepaths to all selected object, separated"
#~ " by semicolons (``;``)."
#~ msgstr ""

#~ msgid ""
#~ "When you declare an output, the algorithm will try to add it to QGIS once it"
#~ " is finished. That is the reason why, although the ``runalg()`` method does "
#~ "not load the layers it produces, the final TWI layer will be loaded, since "
#~ "it is saved to the file entered by the user, which is the value of the "
#~ "corresponding output."
#~ msgstr ""

#~ msgid "|updatedisclaimer|"
#~ msgstr ""
