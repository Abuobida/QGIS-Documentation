# 
# Translators:
# Dick Groskamp, 2015
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-05 22:35\n"
"PO-Revision-Date: 2015-05-25 17:53+0000\n"
"Last-Translator: Dick Groskamp\n"
"Language-Team: Dutch (http://www.transifex.com/qgis/qgis-documentation/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:11
msgid "Reading And Storing Settings"
msgstr "Instellingen lezen en opslaan"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:13
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr "Vaak is het voor een plug-in nuttig om enkele variabelen op te slaan zodat de gebruiker ze niet opnieuw hoeft in te voeren of te selecteren als de plug-in een volgende keer wordt uitgevoerd."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:21
msgid "We can make difference between several types of settings:"
msgstr "We kunnen onderscheid maken tussen de verscheidene typen instellingen:"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:49
msgid ""
"The second parameter of the :func:`value()` method is optional and specifies"
" the default value if there is no previous value set for the passed setting "
"name."
msgstr "De tweede parameter van de methode :func:`value()` is optioneel en specificeert de standaard waarde als er geen eerdere waarde is ingesteld voor de doorgegeven naam van de instelling."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:75
msgid ""
"As you can see, the :func:`writeEntry` method is used for all data types, "
"but several methods exist for reading the setting value back, and the "
"corresponding one has to be selected for each data type."
msgstr "Zoals u kunt zien wordt de methode :func:`writeEntry` gebruikt voor alle gegevenstypen, mer er bestaan verscheidene methoden om de waarde van de instelling terug in te lezen, en de corresponderende moet worden geselecteerd voor elk gegevenstype."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:53
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "settings"
msgstr "instellingen"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "reading"
msgstr "lezen"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "storing"
msgstr "opslaan"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "global"
msgstr "globaal"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:53
msgid "project"
msgstr "project"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "map layer"
msgstr "kaartlaag"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:16
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. For"
" each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr "Deze variabelen kunnen worden opgeslagen en weer worden opgehaald met de hulp van Qt en de API van QGIS. Voor elke variabele zou u een sleutel moeten kiezen die kan worden gebruikt om toegang te verkrijgen tot de variabele --- voor de favoriete kleur van de gebruiker zou u de sleutel \"favourite_color\" kunnen gebruiken of elke andere tekenreeks met betekenis. Het wordt aanbevolen enige structuur aan te brengen in het benoemen van sleutels."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid ""
"**global settings** --- they are bound to the user at particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. This functionality is provided directly by Qt"
" framework by the means of :class:`QSettings` class. By default, this class "
"stores settings in system's \"native\" way of storing settings, that is --- "
"registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The"
" `QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is "
"comprehensive, so we will provide just a simple example"
msgstr "**globale instellingen** --- zij zijn gebonden aan de gebruiker op een bepaalde machine. QGIS slaat zelf heel veel globale instellingen op, bijvoorbeeld, de grootte van het hoofdvenster of de standaard tolerantie voor snappen. Deze functionaliteit wordt direct verschaft door het framework Qt door middel van de klasse :class:`QSettings` . Standaard slaat deze klasse instellingen op in de \"eigen\" manier van het systeem voor het opslaan van instellingen, dat is --- registry (op Windows), bestand .plist (op Mac OS X) of bestand .ini (op Unix). De `QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is zeer uitgebreid, dus zullen we slechts een eenvoudig voorbeeld geven"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:55
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one. An example of "
"usage follows"
msgstr "**projectinstellingen** --- variëren tussen de verschillende projecten en daarom zijn ze gebonden aan een projectbestand. De kleur van de achtergrond van het kaartvenster of het doel coördinaten referentiesysteem (CRS) zijn daar voorbeelden van --- een witte achtergrond en WGS84 zouden misschien geschikt zijn voor het ene project, terwijl ene gele achtergrond en de projectie UTM beter geschikt zijn voor een ander. Een voorbeeld van het gebruik volgt"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:81
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"in project file, so if the user opens the project again, the layer-related "
"settings will be there again. This functionality has been added in QGIS "
"v1.4. The API is similar to QSettings --- it takes and returns QVariant "
"instances"
msgstr "**instellingen voor kaartlagen** --- deze instellingen zijn gerelateerd aan een bepaalde instance van een kaartlaag in een project. Zij zijn *niet* verbonden met de onderliggende gegevensbron van een laag, dus als u twee instances voor kaartlagen maakt uit één shapefile, zullen zij de instellingen niet delen. De instellingen worden opgeslagen in een projectbestand, dus als de gebruiker het project opnieuw opent, zijn de aan de laag gerelateerde instellingen weer aanwezig. Deze functionaliteit is toegevoegd in QGIS v1.4. De API is soortgelijk aan QSettings --- het ontvangt en geeft instances van QVariant terug"

#~ msgid ""
#~ "These variables can be saved a retrieved with help of Qt and QGIS API. For "
#~ "each variable, you should pick a key that will be used to access the "
#~ "variable --- for user's favourite color you could use key "
#~ "\"favourite_color\" or any other meaningful string. It is recommended to "
#~ "give some structure to naming of keys."
#~ msgstr ""

#~ msgid ""
#~ "**global settings** --- they are bound to the user at particular machine. "
#~ "QGIS itself stores a lot of global settings, for example, main window size "
#~ "or default snapping tolerance. This functionality is provided directly by Qt"
#~ " framework by the means of QSettings class. By default, this class stores "
#~ "settings in system's \"native\" way of storing settings, that is --- "
#~ "registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The"
#~ " `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ "
#~ "is comprehensive, so we will provide just a simple example::"
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background color or "
#~ "destination coordinate reference system (CRS) are examples --- white "
#~ "background and WGS84 might be suitable for one project, while yellow "
#~ "background and UTM projection are better for another one. An example of "
#~ "usage follows::"
#~ msgstr ""

#~ msgid ""
#~ "**map layer settings** --- these settings are related to a particular "
#~ "instance of a map layer with a project. They are *not* connected with "
#~ "underlying data source of a layer, so if you create two map layer instances "
#~ "of one shapefile, they will not share the settings. The settings are stored "
#~ "in project file, so if the user opens the project again, the layer-related "
#~ "settings will be there again. This functionality has been added in QGIS "
#~ "v1.4. The API is similar to QSettings --- it takes and returns QVariant "
#~ "instances::"
#~ msgstr ""
