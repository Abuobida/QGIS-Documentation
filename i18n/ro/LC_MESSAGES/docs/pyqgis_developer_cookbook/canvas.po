# 
# Translators:
# Tudor Bărăscu <tudorbarascu@yahoo.com>, 2016
# Sorin Călinică <scalinica@gmail.com>, 2014-2015
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-05 22:35\n"
"PO-Revision-Date: 2016-08-17 17:26+0000\n"
"Last-Translator: Sorin Călinică <scalinica@gmail.com>\n"
"Language-Team: Romanian (http://www.transifex.com/qgis/qgis-documentation/language/ro/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ro\n"
"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:11
msgid "Using Map Canvas"
msgstr "Folosirea suportului de hartă"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:16
msgid ""
"The Map canvas widget is probably the most important widget within QGIS "
"because it shows the map composed from overlaid map layers and allows "
"interaction with the map and layers. The canvas shows always a part of the "
"map defined by the current canvas extent. The interaction is done through "
"the use of **map tools**: there are tools for panning, zooming, identifying "
"layers, measuring, vector editing and others. Similar to other graphics "
"programs, there is always one tool active and the user can switch between "
"the available tools."
msgstr "Widget-ul suportului de hartă este, probabil, cel mai important în QGIS, deoarece prezintă o hartă compusă din straturi suprapuse și permite atât interacțiunea cu harta cât și cu straturile. Suportul arată întotdeauna o parte a hărții definită de caseta de încadrare curentă. Interacțiunea se realizează prin utilizarea unor **instrumente pentru hartă**: există instrumente de panoramare, de mărire, de identificare a straturilor, de măsurare, de editare vectorială și altele. Similar altor programe de grafică, există întotdeauna un instrument activ, iar utilizatorul poate comuta între instrumentele disponibile."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:32
msgid ""
"Whenever the map has been panned, zoomed in/out (or some other action "
"triggers a refresh), the map is rendered again within the current extent. "
"The layers are rendered to an image (using :class:`QgsMapRenderer` class) "
"and that image is then displayed in the canvas. The graphics item (in terms "
"of the Qt graphics view framework) responsible for showing the map is "
":class:`QgsMapCanvasMap` class. This class also controls refreshing of the "
"rendered map. Besides this item which acts as a background, there may be "
"more **map canvas items**. Typical map canvas items are rubber bands (used "
"for measuring, vector editing etc.) or vertex markers. The canvas items are "
"usually used to give some visual feedback for map tools, for example, when "
"creating a new polygon, the map tool creates a rubber band canvas item that "
"shows the current shape of the polygon. All map canvas items are subclasses "
"of :class:`QgsMapCanvasItem` which adds some more functionality to the basic"
" ``QGraphicsItem`` objects."
msgstr "Ori de câte ori harta a fost deplasată, mărită/micșorată (sau alte acțiuni care declanșează o recitire), harta este randată iarăși în interiorul granițelor curente. Straturile sunt transformate într-o imagine (folosind clasa :class:`QgsMapRenderer`) iar acea imagine este afișată pe suport. Elementul grafic (în termeni ai cadrului de lucru Qt Graphics View) responsabil pentru a afișarea hărții este :class:`QgsMapCanvasMap`. Această clasă controlează, de asemenea, recitirea hărții randate. În afară de acest element, care acționează ca fundal, pot exista mai multe **elemente ale suportului hărții**. Elementele tipice suportului de hartă sunt benzile elastice (utilizate pentru măsurare, editare vectorială etc) sau marcajele nodurilor. Elementele suportului sunt de obicei utilizate pentru a oferi un răspuns vizual pentru instrumentele hărții, de exemplu, atunci când se creează un nou poligon, instrumentul corespunzător creează o bandă elastică de forma actuală a poligonului. Toate elementele suportului de hartă reprezintă subclase ale :class:`QgsMapCanvasItem` care adaugă mai multe funcționalități obiectelor de bază ``QGraphicsItem``."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:48
msgid "To summarize, the map canvas architecture consists of three concepts:"
msgstr "Pentru a rezuma, arhitectura suportului pentru hartă constă în trei concepte:"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:50
msgid "map canvas --- for viewing of the map"
msgstr "suportul de hartă --- pentru vizualizarea hărții"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:51
msgid ""
"map canvas items --- additional items that can be displayed in map canvas"
msgstr "elementele  --- elemente suplimentare care pot fi afișate în suportul hărții"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:52
msgid "map tools --- for interaction with map canvas"
msgstr "instrumentele hărții --- pentru interacțiunea cu suportul hărții"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:57
msgid "Embedding Map Canvas"
msgstr "Încapsularea suportului de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:67
msgid ""
"This produces a standalone window with map canvas. It can be also embedded "
"into an existing widget or window. When using .ui files and Qt Designer, "
"place a ``QWidget`` on the form and promote it to a new class: set "
"``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The "
"``pyuic4`` utility will take care of it. This is a very convenient way of "
"embedding the canvas. The other possibility is to manually write the code to"
" construct map canvas and other widgets (as children of a main window or "
"dialog) and create a layout."
msgstr "Acest cod va produce o fereastră de sine stătătoare cu suport pentru hartă. Ea poate fi, de asemenea, încorporată într-un widget sau într-o fereastră deja existente. Atunci când se utilizează fișiere .ui și Qt Designer, puneți un ``QWidget`` pe formă pe care, ulterior, o veți promova la o nouă clasă: setați ``QgsMapCanvas`` ca nume de clasă și stabiliți ``qgis.gui`` ca fișier antet. Utilitarul ``pyuic4`` va avea grijă de ea. Acesta este un mod foarte convenabil de încapsulare a suportului. Cealaltă posibilitate este de a scrie manual codul pentru a construi suportul hărții și alte widget-uri (în calitate de copii ai ferestrei principale sau de dialog), apoi creați o așezare în pagină."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:83
msgid ""
"(In case you are wondering, ``Qt`` comes from ``PyQt4.QtCore`` module and "
"``Qt.white`` is one of the predefined ``QColor`` instances.)"
msgstr "(În cazul în care vă întrebați, ``Qt`` vine de la modulul ``PyQt4.QtCore`` iar ``Qt.white`` este una dintre instanțele ``QColor`` predefinite.)"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:105
msgid ""
"After executing these commands, the canvas should show the layer you have "
"loaded."
msgstr "După executarea acestor comenzi, suportul ar trebui să arate stratul pe care le-ați încărcat."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:111
msgid "Using Map Tools with Canvas"
msgstr "Folosirea instrumentelor în suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:195
msgid "Rubber Bands and Vertex Markers"
msgstr "Benzile elastice și marcajele nodurilor"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:221
msgid ""
"Note that points for polygon is not a plain list: in fact, it is a list of "
"rings containing linear rings of the polygon: first ring is the outer "
"border, further (optional) rings correspond to holes in the polygon."
msgstr "Rețineți că punctele pentru poligon nu reprezintă o simplă listă: în fapt, aceasta este o listă de inele conținând inele liniare ale poligonului: primul inel reprezintă granița exterioară, în plus (opțional) inelele corespund găurilor din poligon."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:241
msgid ""
"(in C++ it's possible to just delete the item, however in Python ``del r`` "
"would just delete the reference and the object will still exist as it is "
"owned by the canvas)"
msgstr "(În C + + este posibilă ștergerea doar a elementului, însă în Python ``del r`` ar șterge doar referința iar obiectul va exista în continuare, acesta fiind deținut de suport)"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:265
msgid ""
"For temporary hiding of vertex markers and removing them from canvas, the "
"same applies as for the rubber bands."
msgstr "Pentru ascunderea temporară a markerilor vertex și pentru eliminarea lor de pe suport, același lucru este valabil și pentru benzile elastice."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:271
msgid "Writing Custom Map Tools"
msgstr "Dezvoltarea instrumentelor personalizate pentru suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:276
msgid ""
"Map tools should inherit from the :class:`QgsMapTool` class or any derived "
"class, and selected as active tools in the canvas using the "
":func:`setMapTool` method as we have already seen."
msgstr "Instrumentele de hartă ar trebui să moștenească clasa :class:`QgsMapTool` sau orice altă clasă derivată, și să fie selectate ca instrumente active pe suport, folosindu-se metoda :func:`setMapTool`, așa cum am văzut deja."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:351
msgid "Writing Custom Map Canvas Items"
msgstr "Dezvoltarea elementelor personalizate pentru suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:46
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:54
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:108
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:192
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:192
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:268
#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:348
msgid "map canvas"
msgstr "suportul hărții"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:46
msgid "architecture"
msgstr "arhitectură"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:54
msgid "embedding"
msgstr "încapsulare"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:108
msgid "map tools"
msgstr "instrumente pentru hartă"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:192
msgid "rubber bands"
msgstr "benzi de cauciuc"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:192
msgid "vertex markers"
msgstr "marcaje vertex"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:268
msgid "writing custom map tools"
msgstr "dezvoltarea instrumentelor de hartă personalizate"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:348
msgid "writing custom canvas items"
msgstr "dezvoltarea elementelor personalizate pentru suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:24
msgid ""
"Map canvas is implemented as :class:`QgsMapCanvas` class in :mod:`qgis.gui` "
"module. The implementation is based on the Qt Graphics View framework. This "
"framework generally provides a surface and a view where custom graphics "
"items are placed and user can interact with them.  We will assume that you "
"are familiar enough with Qt to understand the concepts of the graphics "
"scene, view and items. If not, please make sure to read the `overview of the"
" framework <http://qt-project.org/doc/qt-4.8/graphicsview.html>`_."
msgstr "Suportul hărții este implementat ca și clasa :class:`QgsMapCanvas`, în modulul :mod:`qgis.gui`. Implementarea se bazează pe cadrul de lucru Qt Graphics View. Acest cadru, în general, pune la dispoziție o suprafață și o fereastră de vizualizare a acesteia, unde sunt plasate elementele grafice personalizate, utilizatorul putând interacționa cu ele. Vom presupune că v-ați familiarizat suficient cu Qt, pentru a înțelege conceptele de scenă grafică, vizualizare și elemente. Dacă nu, vă rugăm să citiți `o prezentare generală a cadrului de lucru <http://qt-project.org/doc/qt-4.8/graphicsview.html>`_."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:59
msgid ""
"Map canvas is a widget like any other Qt widget, so using it is as simple as"
" creating and showing it"
msgstr "Canevasul hărții este un widget ca orice alt widget Qt, așa că utilizarea este la fel de simplă ca și crearea și afișarea lui"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:75
msgid ""
"By default, map canvas has black background and does not use anti-aliasing. "
"To set white background and enable anti-aliasing for smooth rendering"
msgstr "În mod implicit, canevasul hărții are un fundal negru și nu utilizează anti-zimțare. Pentru a seta fundalul alb și pentru a permite anti-zimțare pentru o redare mai bună"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:86
msgid ""
"Now it is time to add some map layers. We will first open a layer and add it"
" to the map layer registry. Then we will set the canvas extent and set the "
"list of layers for canvas"
msgstr "Acum este timpul adăugării mai multor straturi de hartă. Vom deschide mai întâi un strat și-l vom adăuga la registrul straturilor. Apoi vom stabili extinderea canevasului și vom stabili lista straturilor"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:113
msgid ""
"The following example constructs a window that contains a map canvas and "
"basic map tools for map panning and zooming. Actions are created for "
"activation of each tool: panning is done with :class:`QgsMapToolPan`, "
"zooming in/out with a pair of :class:`QgsMapToolZoom` instances. The actions"
" are set as checkable and later assigned to the tools to allow automatic "
"handling of checked/unchecked state of the actions -- when a map tool gets "
"activated, its action is marked as selected and the action of the previous "
"map tool is deselected. The map tools are activated using :func:`setMapTool`"
" method."
msgstr "Următorul exemplu construiește o fereastră care conține un canevas și instrumente de bază pentru panoramare și mărire hartă. Acțiunile sunt create pentru activarea fiecărui instrument: panoramarea se face cu :class:`QgsMapToolPan`, mărirea/micșorarea cu o pereche de instanțe a :class:`QgsMapToolZoom`. Acțiunile sunt setate ca selectabile, și asignate ulterior instrumentelor, pentru a permite gestionarea automată a stării selectabile a acțiunilor - atunci când un instrument al hărții este activat, acțiunea sa este marcată ca fiind selectată iar acțiunea instrumentului anterior este deselectată. Instrumentele sunt activate folosindu-se metoda :func:`setMapTool`."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:177
msgid ""
"You can put the above code to a file, e.g. :file:`mywnd.py` and try it out "
"in Python console within QGIS. This code will put the currently selected "
"layer into newly created canvas"
msgstr "Puteți pune codul de mai sus într-un fișier, de exemplu, :file:`mywnd.py` și să-l încercați apoi în consola Python din QGIS. Acest cod va pune stratul curent selectat în noul canevas creat"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:187
msgid ""
"Just make sure that the :file:`mywnd.py` file is located within Python "
"search path (``sys.path``). If it isn't, you can simply add it: "
"``sys.path.insert(0, '/my/path')`` --- otherwise the import statement will "
"fail, not finding the module."
msgstr "Doar asigurați-vă că fișierul :file:`mywnd.py` se află în calea de căutare pentru Python (``sys.path``). În cazul în care nu este, puteți pur și simplu să o adăugați: ``sys.path.insert(0, '/calea/mea')`` --- altfel declarația de import nu va reuși, negăsind modulul."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:197
msgid ""
"To show some additional data on top of the map in canvas, use map canvas "
"items. It is possible to create custom canvas item classes (covered below), "
"however there are two useful canvas item classes for convenience: "
":class:`QgsRubberBand` for drawing polylines or polygons, and "
":class:`QgsVertexMarker` for drawing points. They both work with map "
"coordinates, so the shape is moved/scaled automatically when the canvas is "
"being panned or zoomed."
msgstr "Pentru a arăta unele date suplimentare în partea de sus a hărții, folosiți elemente ale canevasului. Cu toate că este posibil să se creeze clase de elemente de canevas personalizate (detaliate mai jos), există două clase de elemente confortabile :class:`QgsRubberBand` pentru desenarea de polilinii sau poligoane, și :class:`QgsVertexMarker` pentru puncte. Amândouă lucrează cu coordonatele hărții, astfel încât o formă este mutată/scalată în mod automat atunci când canevasul este rotit sau mărit."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:205
msgid "To show a polyline"
msgstr "Pentru a afișa o polilinie"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:213
msgid "To show a polygon"
msgstr "Pentru a afișa un poligon"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:225
msgid ""
"Rubber bands allow some customization, namely to change their color and line"
" width"
msgstr "Benzile elastice acceptă unele personalizări, și anume schimbarea culorii și a lățimii liniei"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:233
msgid ""
"The canvas items are bound to the canvas scene. To temporarily hide them "
"(and show again, use the :func:`hide` and :func:`show` combo. To completely "
"remove the item, you have to remove it from the scene of the canvas"
msgstr "Elementele suportului sunt legate de suportul hărții. Pentru a le ascunde temporar (și a le arăta din nou, folosiți combinația :func:`hide` și :func:`show`. Pentru a elimina complet elementul, trebuie să-l eliminăm de pe scena canevasului"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:245
msgid ""
"Rubber band can be also used for drawing points, however "
":class:`QgsVertexMarker` class is better suited for this "
"(:class:`QgsRubberBand` would only draw a rectangle around the desired "
"point). How to use the vertex marker"
msgstr "Banda elastică poate fi de asemenea utilizată pentru desenarea de puncte, însă, clasa :class:`QgsVertexMarker` este mai potrivită pentru aceasta (:class:`QgsRubberBand` ar trasa doar un dreptunghi în jurul punctului dorit). Cum să utilizați simbolul nodului"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:255
msgid ""
"This will draw a red cross on position [0,0]. It is possible to customize "
"the icon type, size, color and pen width"
msgstr "În acest mod se va desena o cruciuliță roșie pe poziția [0,0]. Este posibilă personalizarea tipului pictogramei, dimensiunea, culoarea și lățimea instrumentului de desenare"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:273
msgid ""
"You can write your custom tools, to implement a custom behaviour to actions "
"performed by users on the canvas."
msgstr "Puteți crea propriile instrumente, pentru a implementa un comportament personalizat pentru acțiunile executate de către utilizatori pe canevas."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:280
msgid ""
"Here is an example of a map tool that allows to define a rectangular extent "
"by clicking and dragging on the canvas. When the rectangle is defined, it "
"prints its boundary coordinates in the console. It uses the rubber band "
"elements described before to show the selected rectangle as it is being "
"defined."
msgstr "Iată un exemplu de instrument pentru hartă, care permite definirea unei limite dreptunghiulare, făcând clic și trăgând cursorul mouse-ului pe canevas. După ce este definit dreptunghiul, coordonatele sale sunt afișate în consolă. Se utilizează elementele benzii elastice descrise mai înainte, pentru a arăta dreptunghiul selectat, așa cum a fost definit."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:355
msgid "**TODO:**"
msgstr "**DE EFECTUAT:**"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:354
msgid "how to create a map canvas item"
msgstr " cum să creați un element pentru canevas"

#~ msgid ""
#~ "Map canvas is implemented as :class:`QgsMapCanvas` class in :mod:`qgis.gui` "
#~ "module.  The implementation is based on the Qt Graphics View framework. This"
#~ " framework generally provides a surface and a view where custom graphics "
#~ "items are placed and user can interact with them.  We will assume that you "
#~ "are familiar enough with Qt to understand the concepts of the graphics "
#~ "scene, view and items. If not, please make sure to read the `overview of the"
#~ " framework <http://doc.qt.nokia.com/graphicsview.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "Map canvas is a widget like any other Qt widget, so using it is as simple as"
#~ " creating and showing it::"
#~ msgstr ""

#~ msgid ""
#~ "By default, map canvas has black background and does not use anti-aliasing. "
#~ "To set white background and enable anti-aliasing for smooth rendering::"
#~ msgstr ""

#~ msgid ""
#~ "Now it is time to add some map layers. We will first open a layer and add it"
#~ " to the map layer registry.  Then we will set the canvas extent and set the "
#~ "list of layers for canvas::"
#~ msgstr ""

#~ msgid ""
#~ "The following example constructs a window that contains a map canvas and "
#~ "basic map tools for map panning and zooming.  Actions are created for "
#~ "activation of each tool: panning is done with :class:`QgsMapToolPan`, "
#~ "zooming in/out with a pair of :class:`QgsMapToolZoom` instances. The actions"
#~ " are set as checkable and later assigned to the tools to allow automatic "
#~ "handling of checked/unchecked state of the actions -- when a map tool gets "
#~ "activated, its action is marked as selected and the action of the previous "
#~ "map tool is deselected. The map tools are activated using :func:`setMapTool`"
#~ " method."
#~ msgstr ""

#~ msgid ""
#~ "You can put the above code to a file, e.g. ``mywnd.py`` and try it out in "
#~ "Python console within QGIS.  This code will put the currently selected layer"
#~ " into newly created canvas::"
#~ msgstr ""

#~ msgid ""
#~ "Just make sure that the ``mywnd.py`` file is located within Python search "
#~ "path (``sys.path``). If it isn't, you can simply add it: "
#~ "``sys.path.insert(0, '/my/path')`` --- otherwise the import statement will "
#~ "fail, not finding the module."
#~ msgstr ""

#~ msgid ""
#~ "To show some additional data on top of the map in canvas, use map canvas "
#~ "items. It is possible to create custom canvas item classes (covered below), "
#~ "however there are two useful canvas item classes for convenience: "
#~ ":class:`QgsRubberBand` for drawing polylines or polygons, and "
#~ ":class:`QgsVertexMarker` for drawing points.  They both work with map "
#~ "coordinates, so the shape is moved/scaled automatically when the canvas is "
#~ "being panned or zoomed."
#~ msgstr ""

#~ msgid "To show a polyline::"
#~ msgstr ""

#~ msgid "To show a polygon::"
#~ msgstr ""

#~ msgid ""
#~ "Rubber bands allow some customization, namely to change their color and line"
#~ " width::"
#~ msgstr ""

#~ msgid ""
#~ "The canvas items are bound to the canvas scene. To temporarily hide them "
#~ "(and show again, use the :func:`hide` and :func:`show` combo. To completely "
#~ "remove the item, you have to remove it from the scene of the canvas::"
#~ msgstr ""

#~ msgid ""
#~ "Rubber band can be also used for drawing points, however "
#~ ":class:`QgsVertexMarker` class is better suited for this "
#~ "(:class:`QgsRubberBand` would only draw a rectangle around the desired "
#~ "point). How to use the vertex marker::"
#~ msgstr ""

#~ msgid ""
#~ "This will draw a red cross on position [0,0]. It is possible to customize "
#~ "the icon type, size, color and pen width::"
#~ msgstr ""

#~ msgid ""
#~ "You can write your custom tools, to implement a custom behaviour to actions "
#~ "perfored by users on the canvas."
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of a map tool that allows to define a rectangular extent "
#~ "by clicking and draggin on the canvas. When the rectangle is defined, it "
#~ "prints its boundary coordinates in the console. It uses the rubber band "
#~ "elements described before to show the selected rectangle as it is being "
#~ "defined."
#~ msgstr ""

#~ msgid "**TODO:** how to create a map canvas item"
#~ msgstr ""
