# 
# Translators:
# Ivan Cortez <cicat@hotmail.es>, 2016
# Michelle Jones <michelle99cr@hotmail.com>, 2015
# Minerva Durán Martínez <mine_tod@yahoo.com.mx>, 2016
# YoViajo, 2016
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-05 22:35\n"
"PO-Revision-Date: 2016-08-25 20:46+0000\n"
"Last-Translator: YoViajo\n"
"Language-Team: Spanish (http://www.transifex.com/qgis/qgis-documentation/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:9
msgid "Network analysis library"
msgstr "Biblioteca de análisis de redes"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:18
msgid ""
"creates mathematical graph from geographical data (polyline vector layers)"
msgstr "Crear gráfico matemático de datos geográficos (capas vectoriales de polilínea)"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:27
msgid "General information"
msgstr "Información general"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:31
msgid "create graph from geodata (usually polyline vector layer)"
msgstr "Crear gráfica de geodatos (normalmente de capa vectorial de polilíneas)"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:32
msgid "run graph analysis"
msgstr "ejecutar análisis gráfico"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:33
msgid "use analysis results (for example, visualize them)"
msgstr "utilizar resultados de análisis (por ejemplo, visualizarlos)"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:142
msgid "crs --- coordinate reference system to use. Mandatory argument."
msgstr "src --- sistema de referencia de coordenadas a utilizar. Argumento obligatorio."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:143
msgid ""
"otfEnabled --- use \"on the fly\" reprojection or no. By default "
"const:`True` (use OTF)."
msgstr "otfEnable --- utilizar  la reproyección 'al vuelo' o no. Por defecto const:`True` (utilizar OTF)."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:145
msgid "topologyTolerance --- topological tolerance. Default value is 0."
msgstr "topologyTolerance --- tolerancia topologica. Por defecto el valor es 0."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:146
msgid "ellipsoidID --- ellipsoid to use. By default \"WGS84\"."
msgstr "ellipsoidID --- ellipsoid a utilizar. Por defecto \"WGS84\"."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:185
msgid "Graph analysis"
msgstr "Análisis gráfico"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:212
msgid "source --- input graph"
msgstr "fuente --- gráfico de entrada"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:213
msgid ""
"startVertexIdx --- index of the point on the tree (the root of the tree)"
msgstr "startVertexIdx --- índice del punto en el árbol (la raíz del árbol)"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:214
msgid "criterionNum --- number of edge property to use (started from 0)."
msgstr "criterionNum --- número de propiedad de borde a utilizar (iniciar de 0)."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:220
msgid ""
"The :func:`dijkstra` method has the same arguments, but returns two arrays. "
"In the first array element i contains index of the incoming edge or -1 if "
"there are no incoming edges. In the second array element i contains distance"
" from the root of the tree to vertex i or DOUBLE_MAX if vertex i is "
"unreachable from the root."
msgstr "El método :func:`dijkstra` tiene los mismos argumentos, pero regresa dos arrays. En el primer elemento del array i contiene el índice del borde entrante o -1 si no hay bordes entrantes. En el segundo elemento del array i contiene la distancia de la raíz del árbol al vértice i o DOUBLE_MAX si el vértice i es inalcanzable de la raíz."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:14
msgid ""
"Starting from revision `ee19294562 "
"<https://github.com/qgis/QGIS/commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_"
" (QGIS >= 1.8) the new network analysis library was added to the QGIS core "
"analysis library. The library:"
msgstr "A partir de la versión `ee19294562 <https://github.com/qgis/QGIS/commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_ (QGIS >= 1.8) la nueva librería de análisis de redes se agregó a la librería de análisis de nucleo de QGIS. La librería:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:19
msgid ""
"implements basic methods from graph theory (currently only Dijkstra's "
"algorithm)"
msgstr "implementa métodos básicos de la teoría de grafos (actualmente sólo el algoritmo Dijkstra)"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:22
msgid ""
"The network analysis library was created by exporting basic functions from "
"the RoadGraph core plugin and now you can use it's methods in plugins or "
"directly from the Python console."
msgstr "La librería de análisis de redes fue creada por funciones básicas de exportación del complemento núcleo RoadGraph y ahora se puede utilizar los metodos en complementos o directamente de la consola Python."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:29
msgid "Briefly, a typical use case can be described as:"
msgstr "Brevemente, un caso de uso típico se puede describir como:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:36
msgid "Building a graph"
msgstr "Contruir un gráfico"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:38
msgid ""
"The first thing you need to do --- is to prepare input data, that is to "
"convert a vector layer into a graph. All further actions will use this "
"graph, not the layer."
msgstr "Lo primero que hay que hacer --- es preparar la entrada de datos, que es convertir una capa vectorial en un gráfico. Todas las acciones adicionales utilizarán esta gráfica, no la capa."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:42
msgid ""
"As a source we can use any polyline vector layer. Nodes of the polylines "
"become graph vertexes, and segments of the polylines are graph edges. If "
"several nodes have the same coordinates then they are the same graph vertex."
" So two lines that have a common node become connected to each other."
msgstr "Como fuente podemos utilizar una capa vectorial de polilínea. Los nodos de las polilíneas se convierten en vértices del gráfico, y los segmentos de la polilínea son bordes de gráfico. Si varios nodos tienen la misma coordenada entonces ellos tienen el mimso vértice gráfico. Por lo que dos líneas que tienen un nodo en común se conectaran entre si."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:47
msgid ""
"Additionally, during graph creation it is possible to \"fix\" (\"tie\") to "
"the input vector layer any number of additional points. For each additional "
"point a match will be found --- the closest graph vertex or closest graph "
"edge. In the latter case the edge will be split and a new vertex added."
msgstr "Además durante la creación del gráfico se puede \"arreglar\" (\"atar\") a la capa vectorial de entrada cualquier número de puntos adicionales. Para cada punto adicional se encontrará una coincidencia --- el vértice gráfico más cercano o el borde gráfico más cercano. En el último caso el borde será dividido y un nuevo vértice se añadirá."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:52
msgid ""
"Vector layer attributes and length of an edge can be used as the properties "
"of an edge."
msgstr "Los atributos de la capa vectorial y la longitud de un borde se puede utilizar como las propiedades de un borde."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:55
msgid ""
"Converting from a vector layer to the graph is done using the `Builder "
"<http://en.wikipedia.org/wiki/Builder_pattern>`_ programming pattern. A "
"graph is constructed using a so-called Director. There is only one Director "
"for now: `QgsLineVectorLayerDirector "
"<http://qgis.org/api/classQgsLineVectorLayerDirector.html>`_. The director "
"sets the basic settings that will be used to construct a graph from a line "
"vector layer, used by the builder to create the graph. Currently, as in the "
"case with the director, only one builder exists: `QgsGraphBuilder "
"<http://qgis.org/api/classQgsGraphBuilder.html>`_, that creates `QgsGraph "
"<http://qgis.org/api/classQgsGraph.html>`_ objects. You may want to "
"implement your own builders that will build a graphs compatible with such "
"libraries as `BGL "
"<http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or "
"`NetworkX <http://networkx.lanl.gov/>`_."
msgstr "Convertir de una capa vectorial a una gráfica se hace utilizando el `Patrón de la programación del constructor<http://en.wikipedia.org/wiki/Builder_pattern>`_. Una gráfica se construye utilizando un llamado director. Hay solo un Director por ahora: `QgsLineVectorLayerDirector <http://qgis.org/api/classQgsLineVectorLayerDirector.html>`_. El director establece la configuración básica que se utilizará para construir una gráfica de una capa vectorial de línea, utilizado por el constructor para crear la gráfica. Actualmente, con en el caso con el director, solo un constructor existe: `QgsGraphBuilder <http://qgis.org/api/classQgsGraphBuilder.html>`_, que crea objetos `QgsGraph <http://qgis.org/api/classQgsGraph.html>`_. Se puede querer implementar su propio constructor que construya un grafo compatible con cada librería como `BGL <http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or `NetworkX <http://networkx.lanl.gov/>`_."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:66
msgid ""
"To calculate edge properties the programming pattern `strategy "
"<http://en.wikipedia.org/wiki/Strategy_pattern>`_ is used. For now only "
"`QgsDistanceArcProperter "
"<http://qgis.org/api/classQgsDistanceArcProperter.html>`_ strategy is "
"available, that takes into account the length of the route. You can "
"implement your own strategy that will use all necessary parameters. For "
"example, RoadGraph plugin uses a strategy that computes travel time using "
"edge length and speed value from attributes."
msgstr "Para calcular las propiedades del borde el patrón de programación se utiliza `strategy <http://en.wikipedia.org/wiki/Strategy_pattern>`_. Por ahora solo `QgsDistanceArcProperter <http://qgis.org/api/classQgsDistanceArcProperter.html>`_ estrategicamente esta disponible, que toma en cuenta la longitud de la ruta. Se puede implemenetar su propia estrategia que utilizará todos los parametros necesarios. Por ejemplo, el complemento RoadGraph utiliza una estrategía que calcula el tiempo de viaje mediante la longitud del borde y el valor de la velocidad de los atributos."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:73
msgid "It's time to dive into the process."
msgstr "Es tiempo de sumergirse en el proceso."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:75
msgid ""
"First of all, to use this library we should import the networkanalysis "
"module"
msgstr "Antes que nada, para utilizar esta librería debemos importar el modulo de análisis de redes"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:81
msgid "Then some examples for creating a director"
msgstr "Después algunos ejemplos para crear un director"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:96
msgid ""
"To construct a director  we should pass a vector layer, that will be used as"
" the source for the graph structure and information about allowed movement "
"on each road segment (one-way or bidirectional movement, direct or reverse "
"direction). The call looks like this"
msgstr "Para construir un director debemos pasar a una capa vectorial, que se utilizará como fuente para la estructura gráfica y la información sobre el movimiento permitido en cada segmento de carretera (movimiento unidireccional o bidireccional, dirección directa o inversa). La llamada se parece a esto"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:109
msgid "And here is full list of what these parameters mean:"
msgstr "Y aquí esta la lista completa de lo que significan estos parámetros:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:111
msgid "``vl`` --- vector layer used to build the graph"
msgstr "``vl`` --- la capa vectorial utilizada para construir la gráfica"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:112
msgid ""
"``directionFieldId`` --- index of the attribute table field, where "
"information about roads direction is stored. If ``-1``, then don't use this "
"info at all. An integer."
msgstr "``directionFieldId`` --- índice de la tabla de atributos de campo, donde se almacena información acerca de dirección de carreteras. Si ``-1``, entonces no utilice esta información en absoluto. Un entero."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:115
msgid ""
"``directDirectionValue`` --- field value for roads with direct direction "
"(moving from first line point to last one). A string."
msgstr "``directDirectionValue`` --- el valor del campo de carreteras con dirección directa (mover desde la primer punto de línea a la última). Un texto."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:117
msgid ""
"``reverseDirectionValue`` --- field value for roads with reverse direction "
"(moving from last line point to first one). A string."
msgstr "``reverseDirectionValue`` --- valor del campo de carreteras con dirección inversa (mover del último punto de línea al primero). Un texto."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:119
msgid ""
"``bothDirectionValue`` --- field value for bidirectional roads (for such "
"roads we can move from first point to last and from last to first). A "
"string."
msgstr "``bothDirectionValue`` --- valor de campo para carreteras bidireccionales (para cada carretera podemos mover del primer punto al último y del último al primero). Un texto."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:121
msgid ""
"``defaultDirection`` --- default road direction. This value will be used for"
" those roads where field ``directionFieldId`` is not set or has some value "
"different from any of the three values specified above. An integer. ``1`` "
"indicates direct direction, ``2`` indicates reverse direction, and ``3`` "
"indicates both directions."
msgstr "``defaultDirection`` --- dirección de carretera predeterminada. Este valor se utilizará para esos caminos donde el campo ``directionFieldId`` no esta establecido o tiene algun valore diferente de cualquiera de los tres valores especificados anteriormente. Un entero. ``1`` indica la dirección directa, ``2`` la dirección inversa, y ``3`` ambas direcciones."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:127
msgid ""
"It is necessary then to create a strategy for calculating edge properties"
msgstr "Es necesario entonces crear una estrategia para calcular propiedades de borde"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:133
msgid "And tell the director about this strategy"
msgstr "Y decirle al director sobre esta estrategia"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:139
msgid ""
"Now we can use the builder, which will create the graph. The QgsGraphBuilder"
" class constructor takes several arguments:"
msgstr "Ahora podemos utilizar el constructor, que creará el grafo. El constructor de la clase QgsGraphBuilder tomar varios argumentos:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:153
msgid ""
"Also we can define several points, which will be used in the analysis. For "
"example"
msgstr "También podemos definir varios puntos, que se utilizarán en el análisis. Por ejemplo"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:161
msgid ""
"Now all is in place so we can build the graph and \"tie\" these points to it"
msgstr "Ahora todo está en su lugar para que podamos construir el gráfico y \"atar\" a estos puntos"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:167
msgid ""
"Building the graph can take some time (which depends on the number of "
"features in a layer and layer size). ``tiedPoints`` is a list with "
"coordinates of \"tied\" points. When the build operation is finished we can "
"get the graph and use it for the analysis"
msgstr "Construir el grafo puede tomar tiempo (que depende del número de elementos y tamaño de una capa). ``tiedPoints`` es una lista con coordenadas de puntos \"tied\". Cuando la operación de construcción se finalizo podemos obtener la gráfica y utilizarlo para el análisis"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:176
msgid "With the next code we can get the vertex indexes of our points"
msgstr "Con el siguiente código podemos obtener el índice del vértice de nuestros puntos"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:187
msgid ""
"Networks analysis is used to find answers to two questions: which vertexes "
"are connected and how to find a shortest path. To solve these problems the "
"network analysis library provides Dijkstra's algorithm."
msgstr "El análisis de redes es utilizado para encontrar respuestas a dos preguntas: que vértices estan conectados y cómo encontrar la ruta más corta. Para resolver estos problemas la librería de análisis de redes proporciona el algoritmo Dijkstra."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:191
msgid ""
"Dijkstra's algorithm finds the shortest route from one of the vertexes of "
"the graph to all the others and the values of the optimization parameters. "
"The results can be represented as a shortest path tree."
msgstr "El algoritmo Dijkstra encuentra la ruta más corta de uno de los vértices del grafo a todos los otros y los valores de los parámetros de optimización, El resultado puede ser representado como un árbol de la ruta más corta."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:195
msgid ""
"The shortest path tree is a directed weighted graph (or more precisely --- "
"tree) with the following properties:"
msgstr "El árbol del cámino más corto es un grafo ponderado dirigido (o más precisamente -- árbol) con las siguientes propiedades:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:198
msgid "only one vertex has no incoming edges — the root of the tree"
msgstr "sólo un vértice no tiene bordes entrantes  —  la raíz del árbol"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:199
msgid "all other vertexes have only one incoming edge"
msgstr "todos los otros vértices sólo tienen un borde entrante"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:200
msgid ""
"if vertex B is reachable from vertex A, then the path from A to B is the "
"single available path and it is optimal (shortest) on this graph"
msgstr "Si el vértice B es accesible desde el vértice A, entonces el camino de A a B es la única ruta disponible y es optima (más corta) en este grafo"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:203
msgid ""
"To get the shortest path tree use the methods :func:`shortestTree` and "
":func:`dijkstra` of `QgsGraphAnalyzer "
"<http://qgis.org/api/classQgsGraphAnalyzer.html>`_ class. It is recommended "
"to use method :func:`dijkstra` because it works faster and uses memory more "
"efficiently."
msgstr "Para obtener el árbol de la ruta más corta utilice los métodos :func:`shortestTree` y :func:`dijkstra` de la clase `QgsGraphAnalyzer <http://qgis.org/api/classQgsGraphAnalyzer.html>`_. Es recomendable utilizar el método :func:`dijkstra` porque funciona más rápido y utiliza memoria más efectivamente."

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:208
msgid ""
"The :func:`shortestTree` method is useful when you want to walk around the "
"shortest path tree. It always creates a new graph object (QgsGraph) and "
"accepts three variables:"
msgstr "El método :func:`shortestTree` es útil cuando se desea caminar al rededor del árbol del camino más corto. Siempre crea un nuevo objeto grafo (QgsGraph) y acepta tres variables:"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:230
msgid ""
"Here is some very simple code to display the shortest path tree using the "
"graph created with the :func:`shortestTree` method (select linestring layer "
"in TOC and replace coordinates with your own). **Warning**: use this code "
"only as an example, it creates a lots of `QgsRubberBand "
"<http://qgis.org/api/classQgsRubberBand.html>`_ objects and may be slow on "
"large data-sets."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:270
msgid "Same thing but using :func:`dijkstra` method"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:307
msgid "Finding shortest paths"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:309
msgid ""
"To find the optimal path between two points the following approach is used. "
"Both points (start A and end B) are \"tied\" to the graph when it is built. "
"Then using the methods :func:`shortestTree` or :func:`dijkstra` we build the"
" shortest path tree with root in the start point A. In the same tree we also"
" find the end point B and start to walk through the tree from point B to "
"point A. The whole algorithm can be written as"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:326
msgid ""
"At this point we have the path, in the form of the inverted list of vertexes"
" (vertexes are listed in reversed order from end point to start point) that "
"will be visited during traveling by this path."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:330
msgid ""
"Here is the sample code for QGIS Python Console (you will need to select "
"linestring layer in TOC and replace coordinates in the code with yours) that"
" uses method :func:`shortestTree`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:384
msgid "And here is the same sample but using :func:`dijkstra` method"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:434
msgid "Areas of availability"
msgstr "Áreas de disponibilidad"

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:436
msgid ""
"The area of availability for vertex A is the subset of graph vertexes that "
"are accessible from vertex A and the cost of the paths from A to these "
"vertexes are not greater that some value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:440
msgid ""
"More clearly this can be shown with the following example: \"There is a fire"
" station. Which parts of city can a fire truck reach in 5 minutes? 10 "
"minutes? 15 minutes?\". Answers to these questions are fire station's areas "
"of availability."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:445
msgid ""
"To find the areas of availability we can use method :func:`dijkstra` of the "
":class:`QgsGraphAnalyzer` class. It is enough to compare the elements of the"
" cost array with a predefined value. If cost[i] is less than or equal to a "
"predefined value, then vertex i is inside the area of availability, "
"otherwise it is outside."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:451
msgid ""
"A more difficult problem is to get the borders of the area of availability. "
"The bottom border is the set of vertexes that are still accessible, and the "
"top border is the set of vertexes that are not accessible. In fact this is "
"simple: it is the availability border based on the edges of the shortest "
"path tree for which the source vertex of the edge is accessible and the "
"target vertex of the edge is not."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/network_analysis.rst:458
msgid "Here is an example"
msgstr "Aquí tiene un ejemplo"

#~ msgid ""
#~ "Starting from revision `ee19294562 <https://github.com/qgis/Quantum-"
#~ "GIS/commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_ (QGIS >= 1.8) the new"
#~ " network analysis library was added to the QGIS core analysis library. The "
#~ "library:"
#~ msgstr ""

#~ msgid ""
#~ "implements basics method of the graph theory (currently only Dijkstra's "
#~ "algorithm)"
#~ msgstr ""

#~ msgid ""
#~ "Network analysis library was created by exporting basics functions from "
#~ "RoadGraph core plugin and now you can use it's methods in plugins or "
#~ "directly from Python console."
#~ msgstr ""

#~ msgid "Briefly typical use case can be described as:"
#~ msgstr ""

#~ msgid "Building graph"
#~ msgstr ""

#~ msgid ""
#~ "The first thing you need to do --- is to prepare input data, that is to "
#~ "convert vector layer into graph. All further actions will use this graph, "
#~ "not the layer."
#~ msgstr ""

#~ msgid ""
#~ "As a source we can use any polyline vector layer. Nodes of the polylines "
#~ "become graph vertices, and segments of the polylines are graph edges. If "
#~ "several nodes have the same coordinates then they are the same graph vertex."
#~ " So two lines that have a common node become connected to each other."
#~ msgstr ""

#~ msgid ""
#~ "Additionally, during graph creation it is possible to \"fix\" (\"tie\") to "
#~ "the input vector layer any number of additional points. For each additional "
#~ "point a match will be found --- closest graph vertex or closest graph edge. "
#~ "In the latter case the edge will be splitted and new vertex added."
#~ msgstr ""

#~ msgid ""
#~ "As the properties of the edge a vector layer attributes can be used and "
#~ "length of the edge."
#~ msgstr ""

#~ msgid ""
#~ "Converter from vector layer to graph is developed using `Builder "
#~ "<http://en.wikipedia.org/wiki/Builder_pattern>`_ programming pattern. For "
#~ "graph construction response so-called Director. There is only one Director "
#~ "for now: `QgsLineVectorLayerDirector "
#~ "<http://qgis.org/api/api/classQgsLineVectorLayerDirector.html>`_. The "
#~ "director sets the basic settings that will be used to construct a graph from"
#~ " a line vector layer, used by the builder to create graph. Currently, as in "
#~ "the case with the director, only one builder exists: `QgsGraphBuilder "
#~ "<http://qgis.org/api/api/classQgsGraphBuilder.html>`_, that creates "
#~ "`QgsGraph <http://qgis.org/api/api/classQgsGraph.html>`_ objects. You may "
#~ "want to implement your own builders that will build a graphs compatible with"
#~ " such libraries as `BGL "
#~ "<http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or "
#~ "`NetworkX <http://networkx.lanl.gov/>`_."
#~ msgstr ""

#~ msgid ""
#~ "To calculate edge properties programming pattern `strategy "
#~ "<http://en.wikipedia.org/wiki/Strategy_pattern>`_ is used. For now only "
#~ "`QgsDistanceArcProperter "
#~ "<http://qgis.org/api/api/classQgsDistanceArcProperter.html>`_ strategy is "
#~ "available, that takes into account the length of the route. You can "
#~ "implement your own strategy that will use all necessary parameters. For "
#~ "example, RoadGraph plugin uses strategy that compute travel time using edge "
#~ "length and speed value from attributes."
#~ msgstr ""

#~ msgid "It's time to dive in the process."
#~ msgstr ""

#~ msgid ""
#~ "First of all, to use this library we should import networkanalysis module::"
#~ msgstr ""

#~ msgid "Than create director::"
#~ msgstr ""

#~ msgid ""
#~ "To construct a director  we should pass vector layer, that will be used as "
#~ "source for graph and information about allowed movement on each road segment"
#~ " (unilateral or bilateral movement, direct or reverse direction). Here is "
#~ "full list of this parameters:"
#~ msgstr ""

#~ msgid "vl --- vector layer used to build graph"
#~ msgstr ""

#~ msgid ""
#~ "directionFieldId --- index of the attribute table field, where information "
#~ "about roads directions is stored. If -1, then don't use this info at all"
#~ msgstr ""

#~ msgid ""
#~ "directDirectionValue --- field value for roads with direct direction (moving"
#~ " from first line point to last one)"
#~ msgstr ""

#~ msgid ""
#~ "reverseDirectionValue --- field value for roads with reverse direction "
#~ "(moving from last line point to first one)"
#~ msgstr ""

#~ msgid ""
#~ "bothDirectionValue --- field value for bilateral roads (for such roads we "
#~ "can move from first point to last and from last to first)"
#~ msgstr ""

#~ msgid ""
#~ "defaultDirection --- default road direction. This value will be used for "
#~ "those roads where field directionFieldId is not set or have some value "
#~ "different from above."
#~ msgstr ""

#~ msgid ""
#~ "It is necessary then to create strategy for calculating edge properties::"
#~ msgstr ""

#~ msgid "And tell the director about this strategy::"
#~ msgstr ""

#~ msgid ""
#~ "Now we can create builder, which will create graph. QgsGraphBuilder "
#~ "constructor takes several arguments:"
#~ msgstr ""

#~ msgid ""
#~ "Also  we can set several points, which will be used in analysis. For "
#~ "example::"
#~ msgstr ""

#~ msgid "Now all is in place so we can build graph and \"tie\" points to it::"
#~ msgstr ""

#~ msgid ""
#~ "Building graph can take some time (depends on number of features in a layer "
#~ "and layer size). tiedPoints is a list with coordinates of \"tied\" points. "
#~ "When build operation is finished we can get graph and use it for the "
#~ "analysis::"
#~ msgstr ""

#~ msgid "With the next code we can get indexes of our points::"
#~ msgstr ""

#~ msgid ""
#~ "Networks analysis is used to find answers on two questions: which vertices "
#~ "are connected and how to find a shortest path. To solve this problems "
#~ "network analysis library provides Dijkstra's algorithm."
#~ msgstr ""

#~ msgid ""
#~ "Dijkstra's algorithm finds the best route from one of the vertices of the "
#~ "graph to all the others and the values of the optimization parameters. The "
#~ "results can be represented as shortest path tree."
#~ msgstr ""

#~ msgid ""
#~ "The shortest path tree is as oriented weighted graph (or more precisely --- "
#~ "tree) with the following properties:"
#~ msgstr ""

#~ msgid "only one vertex have no incoming edges — the root of the tree"
#~ msgstr ""

#~ msgid "all other vertices have only one incoming edge"
#~ msgstr ""

#~ msgid ""
#~ "if vertex B is reachable from vertex A, then path from A to B is single "
#~ "available path and it is optimal (shortest) on this graph"
#~ msgstr ""

#~ msgid ""
#~ "To get shortest path tree use methods Use methods :func:`shortestTree` and "
#~ ":func:`dijkstra` of `QgsGraphAnalyzer "
#~ "<http://qgis.org/api/api/classQgsGraphAnalyzer.html>`_ class. It is "
#~ "recommended to use method :func:`dijkstra` because it works faster and uses "
#~ "memory more efficiently."
#~ msgstr ""

#~ msgid ""
#~ "The :func:`shortestTree` method is useful when you want to walk around the "
#~ "shortest path tree. It always creates new graph object (QgsGraph) and "
#~ "accepts three variables:"
#~ msgstr ""

#~ msgid ""
#~ "Here is very simple code to display shortest path tree using graph created "
#~ "with :func:`shortestTree` method (select linestring layer in TOC and replace"
#~ " coordinates with yours one). **Warning**: use this code only as an example,"
#~ " it creates a lots of `QgsRubberBand "
#~ "<http://qgis.org/api/api/classQgsRubberBand.html>`_ objects and may be slow "
#~ "on large datasets."
#~ msgstr ""

#~ msgid "Same thing but using :func:`dijkstra` method::"
#~ msgstr ""

#~ msgid "Finding shortest path"
#~ msgstr ""

#~ msgid ""
#~ "To find optimal path between two points the following approach is used. Both"
#~ " points (start A and end B) are \"tied\" to graph when it builds. Than using"
#~ " methods :func:`shortestTree` or :func:`dijkstra` we build shortest tree "
#~ "with root in the start point A. In the same tree we also found end point B "
#~ "and start to walk through tree from point B to point A. Whole algorithm can "
#~ "be written as::"
#~ msgstr ""

#~ msgid ""
#~ "At this point we have path, in the form of the inverted list of vertices "
#~ "(vertices are listed in reversed order from end point to start one) that "
#~ "will be visited during traveling by this path."
#~ msgstr ""

#~ msgid ""
#~ "Here is the sample code for QGIS Python Console (you will need to select "
#~ "linestring layer in TOC and replace coordinates in the code with yours) that"
#~ " uses method :func:`shortestTree`::"
#~ msgstr ""

#~ msgid "And here is the same sample but using :func:`dikstra` method::"
#~ msgstr ""

#~ msgid "Areas of the availability"
#~ msgstr ""

#~ msgid ""
#~ "Area of availability for vertex A is a subset of graph vertices, that are "
#~ "accessible from vertex A and cost of the path from A to this vertices are "
#~ "not greater that some value."
#~ msgstr ""

#~ msgid ""
#~ "More clearly this can be shown with the following example: \"There is a fire"
#~ " station. What part of city fire command can reach in 5 minutes? 10 minutes?"
#~ " 15 minutes?\". Answers on this questions are fire station's areas of "
#~ "availability."
#~ msgstr ""

#~ msgid ""
#~ "To find areas of availablity we can use method :func:`dijksta` of the "
#~ ":class:`QgsGraphAnalyzer` class. It is enough to compare elements of cost "
#~ "array with predefined value. If cost[ i ] is less or equal than predefined "
#~ "value, than vertex i is inside area of availability, otherwise --- outside."
#~ msgstr ""

#~ msgid ""
#~ "More difficult it is to get borders of area of availablity. Bottom border "
#~ "--- is a set of vertices that are still accessible, and top border --- is a "
#~ "set of vertices which are not accesible. In fact this is simple: "
#~ "availability border passed on such edges of the shortest path tree for which"
#~ " start vertex is accessible and end vertex is not accessible."
#~ msgstr ""

#~ msgid "Here is an example::"
#~ msgstr ""
