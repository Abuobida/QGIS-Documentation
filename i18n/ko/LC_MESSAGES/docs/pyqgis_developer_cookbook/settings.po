# 
# Translators:
# BJ Jang <jangbi882@gmail.com>, 2015
# Kwon.Yongchan <ruvyn@naver.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-05 22:35\n"
"PO-Revision-Date: 2015-11-07 12:36+0000\n"
"Last-Translator: BJ Jang <jangbi882@gmail.com>\n"
"Language-Team: Korean (http://www.transifex.com/qgis/qgis-documentation/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:11
msgid "Reading And Storing Settings"
msgstr "설정을 읽고 저장하기"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:13
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr "많은 경우 플러그인에 몇몇 변수들을 저장해서 다음에 플러그인을 실행할 때 사용자가 변수를 입력하거나 선택할 필요가 없도록 하는 것이 유용합니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:21
msgid "We can make difference between several types of settings:"
msgstr "다음과 같은 몇 가지 설정 유형들로 구분할 수 있습니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:49
msgid ""
"The second parameter of the :func:`value()` method is optional and specifies"
" the default value if there is no previous value set for the passed setting "
"name."
msgstr ":func:`value()` 메소드의 두 번째 파라미터는 필수가 아니며, 넘겨준 설정 명칭에 대한 이전 값이 설정되지 않았을 때 사용할 기본값을 설정합니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:75
msgid ""
"As you can see, the :func:`writeEntry` method is used for all data types, "
"but several methods exist for reading the setting value back, and the "
"corresponding one has to be selected for each data type."
msgstr "코드를 보면 알 수 있듯이 모든 데이터 유형에 대해 :func:`writeEntry` 메소드가 사용되지만 설정 값을 다시 읽어 올 때는 여러 가지 메소드들이 있고, 각 데이터 유형에 따라 적절한 메소드를 선택해줘야 합니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:53
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "settings"
msgstr "설정"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "reading"
msgstr "읽어오기"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "storing"
msgstr "저장하기"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "global"
msgstr "전역"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:53
msgid "project"
msgstr "프로젝트"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "map layer"
msgstr "맵 레이어"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:16
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. For"
" each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr "Qt 및 QGIS의 API를 통해 이 변수들을 저장하고 불러올 수 있습니다. 각 변수에 대해 해당 변수에 접근하는 데 사용될 키(key)를 선택해야 합니다. 사용자가 선호하는 색상의 경우 \"favourite_color\" 또는 다른 어떤 의미가 있는 문자열이라도 키로 사용할 수 있습니다. 키를 명명할 때 일종의 구조를 부여하는 것이 좋습니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid ""
"**global settings** --- they are bound to the user at particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. This functionality is provided directly by Qt"
" framework by the means of :class:`QSettings` class. By default, this class "
"stores settings in system's \"native\" way of storing settings, that is --- "
"registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The"
" `QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is "
"comprehensive, so we will provide just a simple example"
msgstr "**전역 설정** --- 전역 설정은 특정 시스템의 사용자에게 종속됩니다. QGIS는 스스로 주요 창 크기나 스냅 허용치 기본값 같은 많은 전역 설정들을 저장합니다. Qt 프레임워크는 :class:`QSettings` 클래스를 통해 직접 이 기능을 제공합니다. 기본적으로 이 클래스는 시스템의 \"고유한\" 설정 저장 방법으로 설정을 저장합니다. 즉 윈도우의 경우 레지스트리, Mac OS X의 경우 ``.plist`` 파일, 유닉스의 경우 ``.ini`` 파일로 저장합니다. 자세한 내용은 `QSettings 문서 <http://doc.qt.io/qt-5/qsettings.html>`_ 에 있으므로, 여기에서는 단순한 예시만 제공할 것입니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:55
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one. An example of "
"usage follows"
msgstr "**프로젝트 설정** --- 각각의 프로젝트에 따라 달라지므로 이 설정은 프로젝트 파일과 연결되어 있습니다. 예를 들어 맵 캔버스 배경색이나 대상 좌표계(CRS) 같은 설정 말입니다. 어떤 프로젝트의 경우 하얀색 배경과 WGS84가 적당할 수 있고, 다른 프로젝트의 경우 노란색 배경과 UTM 투영이 더 나을 수도 있으니까요. 다음 예시는 그 사용법입니다."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:81
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"in project file, so if the user opens the project again, the layer-related "
"settings will be there again. This functionality has been added in QGIS "
"v1.4. The API is similar to QSettings --- it takes and returns QVariant "
"instances"
msgstr "**맵 레이어 설정** --- 이 설정은 어떤 프로젝트의 특정 맵 레이어 인스턴스와 연결됩니다. 이 설정이 레이어의 기저 데이터 소스와 연결되어 있지는 *않습니다*. 따라서 shapefile 하나에 대해 두 개의 맵 레이어 인스턴스를 생성할 경우 이 인스턴스들은 설정을 공유하지 않습니다. 프로젝트 파일 형태로 설정을 저장하기 때문에, 사용자가 다시 프로젝트를 열 경우 레이어와 관련된 설정이 그대로 남아 있을 것입니다. 이 기능은 QGIS 1.4 버전부터 추가되었습니다. 해당 API는 :class:`QSettings` 클래스와 유사하게 :class:`QVariant` 인스턴스를 받고 반환합니다."

#~ msgid ""
#~ "These variables can be saved a retrieved with help of Qt and QGIS API. For "
#~ "each variable, you should pick a key that will be used to access the "
#~ "variable --- for user's favourite color you could use key "
#~ "\"favourite_color\" or any other meaningful string. It is recommended to "
#~ "give some structure to naming of keys."
#~ msgstr ""

#~ msgid ""
#~ "**global settings** --- they are bound to the user at particular machine. "
#~ "QGIS itself stores a lot of global settings, for example, main window size "
#~ "or default snapping tolerance. This functionality is provided directly by Qt"
#~ " framework by the means of QSettings class. By default, this class stores "
#~ "settings in system's \"native\" way of storing settings, that is --- "
#~ "registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The"
#~ " `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ "
#~ "is comprehensive, so we will provide just a simple example::"
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background color or "
#~ "destination coordinate reference system (CRS) are examples --- white "
#~ "background and WGS84 might be suitable for one project, while yellow "
#~ "background and UTM projection are better for another one. An example of "
#~ "usage follows::"
#~ msgstr ""

#~ msgid ""
#~ "**map layer settings** --- these settings are related to a particular "
#~ "instance of a map layer with a project. They are *not* connected with "
#~ "underlying data source of a layer, so if you create two map layer instances "
#~ "of one shapefile, they will not share the settings. The settings are stored "
#~ "in project file, so if the user opens the project again, the layer-related "
#~ "settings will be there again. This functionality has been added in QGIS "
#~ "v1.4. The API is similar to QSettings --- it takes and returns QVariant "
#~ "instances::"
#~ msgstr ""
